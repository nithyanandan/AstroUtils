From dabb3d7 (catalog-save):
===========================

In catalog.py,

(*) Add option init_file in member function __init__() of class
SkyModel. Update docstring accordingly.

From 2a882ab (master):
=====================

In catalog.py,

(*) Add option to save sky model in HDF5 format in member function
save() of class SkyModel. Update docstring accordingly.
(*) Import module h5py to save sky model information in HDF5 format

From 607728a (master):
=====================

In my_operations.py,

(*) Insignificant update in docstring of healpix_interp_along_axis()

From c1a87db (master):
=====================

In my_gridding_modules.py,

(*) Add function grid_3d() along with docstring

From f7d0b72 (master):
=====================

In my_operations.py,

(*) Enforce double precision in healpix_interp_along_axis()

From 0e76f8d (master):
=====================

In my_DSP_modules.py,

(*) Typecast returned window function in window_fftpow() to float64

From 7a1ebc1 (master):
=====================

In my_DSP_modules.py,

(*) Add keyword input fftpow in window_N2width(). Update docstring
accordingly.
(*) Modify window_N2width() to use newly created function
window_fftpow()

From de4ac5a (master):
=====================

In my_DSP_modules.py,

(*) Add function window_fftpow() to compute window functions of
specified shapes whose FFT is raised to a given power. In the
original domain this can be considered as multiple convolutions
of the power is an integer.

From ca84415 (master):
=====================

In my_DSP_modules.py,

(*) Add keyword input method in function downsampler(). Update
docstring accordingly
(*) Add ability to function downsampler() to resample based on both
FFT-based and interpolation-based methods

From 9a029b0 (master):
=====================

In my_DSP_modules.py,

(*) Add keywords area_normalize and power_normalize in function
window_N2width(). Add conditions to compute fractional width
depending on these keywords. Update docstring accordingly

From dc62745 (master):
=====================

In my_DSP_modules.py,

(*) Add normalization by power by using keyword input power_normalize
in function windowing(). Update docstring accordingly

From ee57554 (master):
=====================

In constants.py,

(*) Add value for sidereal day duration

In catalog.py,

(*) Minor change in docstring in member function generate_spectrum()
of class SkyModel

From 64fa4b3 (master):
=====================

In my_operations.py,

(*) Fix bug in function healpix_interp_along_axis() by zeroing an
entire column to ensure the inverse FFT is real while using FFT-based
interpolation

From 86f12df (master):
=====================

(*) Add writer_module.py to git repo

In my_operations.py,

(*) Add a comment to a line in function healpix_interp_along_axis()

From f5262d8:
============

In my_operations.py,

(*) Modify FFT-based interpolation functionality in
healpix_interp_along_axis()
(*) Import lookup_operations module

From 158e87b:
============

In catalog.py,

(*) Add value checking in save() member function of class SkyModel
before saving certain attributes of the class

From 3b82651:
============

In my_operations.py,

(*) Add more checking to decide whether to interpolate along the
specified axis or not in healpix_interp_along_axis(). Update
docstring accordingly

From 15b9777:
============

In catalog.py,

(*) Add member function save() to class SkyModel with docstring
(*) Update docstring of class SkyModel with descriptions of member
functions to_healpix() and save()

From 12a1a76:
============

In catalog.py,

(*) Add capability to member function subset() of class SkyModel to
create subsets along position as well as spectral direction.
(*) Add input keyword axis to member function subset() of class
SkyModel, update docstring of member function and the class

From e296dbd:
============

In my_operations.py,

(*) Change some special character encoding in docstring to normal
single quotes

From 1c68102:
============

In my_operations.py,

(*) Add function healpix_interp_along_axis() with docstring that can
interpolate using HEALPIX and SciPy routines along spherical angle and
one other specified axis respectively
(*) Remove import of ipdb module

From 4742777:
============

In lookup_operations.py,

(*) Add function lookup_1NN_new() with docstring. Tested.
(*) Add function lookup_NN_new() with docstring. Needs serious
development and testing
(*) Rename input parameter file to outfile in function gen_lookup()
to avoid confusion with python's in-built variable file. Update
docstring accordingly
(*) Rename input parameter file to infile in function read_lookup()
to avoid confusion with python's in-built variable file. Update
docstring accordingly
(*) Minor change to docstring of find_1NN()
(*) Remove commented lines in find_1NN()

From a9bc243:
============

In lookup_operations.py,

(*) Add function find_NN() (with docstring) to compute all nearest
neighbours within a certain radius
(*) Add functions find_NN_arg_splitter() and find_NN_pp() for parallel
processing functionality and not intended to be used directly by the
user
(*) Import itertools module
(*) Comment out printing of process name in case of parallel processing

From 2e757e0:
============

(*) Add ephemeris_timing.py to git repo
(*) At the moment it consists of function gmst2gps() taken from David
Kaplan

From 03a62b4:
============

In my_gridding_modules.py,

(*) Change input keyword from range to ranges in function grid_1d() to
not confuse with in-built function range(). Modify docstring
accordingly
(*) Change input keyword from range to rangelist in function grid_2d()
to not confuse with in-built function range(). Modify docstring
accordingly
(*) Add more rigorous type checking for input keyword pad in function
grid()
(*) Tighten type checking in functions grid_1d() and grid_2d() 

From 26762d3 of general:
=======================

In catalog.py,

(*) Remove commented and defunct class Catalog

In changelog.txt,

(*) Change wrong mention of class Catalog to the correct class
SkyModel in the previous commit

From 08b3d89 of general:
=======================

In catalog.py,

(*) Add member function to_healpix() to class SkyModel
(*) Fix type checking bug in member function generate_spectrum() of
class SkyModel

From ff89e45 of general:
=======================

In my_DSP_modules.py,

(*) Check for out of bounds index in input to interpolating function
in downsampler()

From 9ceee44 of general:
=======================

In my_DSP_modules.py,

(*) Add function window_N2width() to compute effective width of window
functions

From aa7710e of general:
=======================

In catalog.py,

(*) Replace usage of 'freq-width' with 'z-width' throughtout in class
SkyModel
(*) Change docstring accordingly

from 31049a0 of general:
=======================

In catalog.py,

(*) Add type checking for flux-scale in input parameter in __init__()
member function of class SkyModel
(*) Enfore array broadcasting of flux_scale in member function
generate_spectrum() of class SkyModel
(*) Update docstring of class SkyModel

In geometry.py,

(*) Rename internal variables in altaz2dircos()

from 0ed80ca of general:
=======================

In catalog.py,

(*) In subset() member function of class SkyModel, input parameter 
indices is now not a keyword input but an essential input. Change 
handling of this input parameter by flattening it first
(*) In subset() member function src_shape is used only if it is set in
the first place
(*) Fix bug in subset() member function of class SkyModel where
earlier the all spectral functional names were returned instead only of
a subset

from 3ff2c66 of general:
=======================

In catalog.py,

(*) Comment out defunct classes Catalog and SkyModel
(*) Rename class SkyModel_new to SkyModel

from 306c2f2 of general:
=======================

In catalog.py,

(*) Create a new class SkyModel_new that can take sky model input whose 
spectral dimension can be specified as a functional form or as an input cube. It
has the ability to create a spectrum from these spectral parameters. This is 
intended to supercede and replace classes catalog and SkyModel.
(*) Create __init__(), subset(), match() and generate_spectrum() member 
functions for class SkyModel_new
(*) Import my_operations and lookup_operations modules 

from v1.08.1 of general:
=======================

In my_DSP_modules.py,

(*) In discretize(), changed input parameter named range to inprange in order
not to conflict with python's in-built command range(). Changed docstring
accordingly.
(*) In XC(), added input keyword parameter pow2 to return a sequence of length
which is the next power of 2. Also modified code and docstring accordingly. Also
when pow2 is False, length of the output sequence is equal to the sum of lengths 
of the two input sequences.
(*) In XC(), fixed a bug where inp2 was being forcibly reassigned to inp1.
(*) In XC(), zeros are padded in front instead of at the end. Also replaced 
NP.roll() with NP.fft.ifftshift() to do the shifting

In constants.py,

(*) Added rest frequency of 21 cm line of neutral hydrogen

In geometry.py,

(*) Changed the rotation matrix in xyz2enu() which was wrong earlier.
(*) Made dosctring of xyz2enu() and enu2xyz() more descriptive
(*) forced azimuth to lie in the range 0-360 in dircos2altaz()

In lookup_operations.py,

(*) Allow comments rows to be accounted for while reading the ascii file in 
read_lookup()
(*) Added a new function find_1NN_pp() that is identical in functionality to 
find_1NN() but should be only used only in parallel programming applications

---------------------------------------------------------------------------------
from v1.08 of general:
=====================

In lookup_operations.py,

(*) Changed name of parameter maxNN in lookup() to maxmatch to indicate that
it refers to number of unique matches to input required and remove the ambiguity
that it refers to number of nearest neighbours for each input location. The 
number of nearest neighbours sought per input location is fixed at 1 in the call
to KDTree query. Changed docstring accordingly.
(*) Docstring of lookup() did not match to the output produced. Fixed it.
(*) Created find_NN() that searches for the nearest neighbours.
(*) Created a new nearest neighbour lookup operation in lookup_1NN() which 
determines the first neighbour in the lookup (reference positions) table and
assigns the value of the nearest neighbour. It is intended to supercede the 
performance of lookup() as it is designed to handle locations in
multi-dimensional parameter (coordinate) space. Uses the find_1NN() routine to
find the nearest neighbours and then subsequently assigns nearest neighbour value

In my_DSP_modules.py,
   
(*) Created a function discretize() that discretizes an input sequence either by
truncation or rounding

---------------------------------------------------------------------------------
from v1.07 of general:
=====================

In my_DSP_modules.py,

(*) Added capability in functions shaping() and windowing() to accept values
'bhw' or 'BHW' in input shape and compute Blackman-Harris window. Changed 
docstrings accordingly.

---------------------------------------------------------------------------------
from v1.06 of general:
=====================

In my_DSP_modules.py,

(*) Added a new function fft_filter which can filter multi-dimensional input data
using the frequency domain representation of the input using frequency weights 
with passband options being 'low' or 'high'

In my_operations.py,

(*) added a customizable function to estimate root mean square value of an input
with multiple dimensions which can apply frequency domain filtering and/or 
mask before estimating standard deviation.
(*) in function reverse(), changed default of ind_range from [-1, 1] to None
because there seemed to be a bug where ind_range from previous call seemed to
copy over to the next call. Still needs to be udnerstood why this was happening.
Changing the default to None seems to eliminate this unexplained carryover.

In lookup_operations.py,

(*) Added a keyword maxNN to populate only the maxNN nearest neighbours with 
nearest neighbour values

---------------------------------------------------------------------------------
from v1.05 of general:
=====================

In geometry.py,

(*) Added further checks in hadec2altaz() to take into account machine precision
effects

Moved module lookup_operations.py from MOFF to general repository.

In lookup_operations.py,

(*) in function lookup(), distNN was not initialized when remove_oob is False.
Now it is initialized.

---------------------------------------------------------------------------------
from v1.04 of general:
=====================

In geometry.py,

(*) sphdist() now returns a flattened array as output
(*) Modified docstring in spherematch.py to indicate that the matches for the 
first catalog are searched for in the second catalog
(*) Modified docstring in spherematch.py to indicate the order of preference in
implementing keyword inputs nnearest and maxmatches
(*) In altaz2hadec(), added an important change that takes care of the sign 
conventions and distinguishes between azimuths that are on opposite sides
(*) In hadec2altaz(), modified to handle any NaN values arising out of machine
precision effects by adding a tolerance factor

In catalog.py,

(*) member function subset() of class Catalog now uses numpy.take() to select 
subset from indices instead of using fancy indexing. This will be faster when
size of indices is large.
(*) member function subset() of class Catalog modified to initialize a subset
catalog differently to reflect changes in Catalog attribute structure made in 
v1.04. 
(*) Modified the docstring of class Catalog to reflect the changes made in its
attribute structure in v1.04 which was forgotten to be made back then.

In my_DSP_modules.py,

(*) Added inverse FFT functionality to FT1D() through use of a boolean 'inverse'
keyword and changed docstring accordingly

---------------------------------------------------------------------------------
from v1.03 of general:
=====================

In catalog.py,

(*) Added a new attribute named 'name' to class Catalog that denotes the catalog 
to which the object belongs. The __init__() function inputs were modified
accordingly.
(*) Modified the attribute frequency of class Catalog to be a vector, one for
each object, thus giving the freedom to have a heterogeneous catalog with source
flux densities at different frequencies. Contents of the __init__() function were
modified accordingly
(*) Added error checking in __init__() member function of class Catalog
(*) Modified error checkign in __init__() member function of class Catalog to
retain src_shape as an optional input parameter

In my_operations.py,

(*) A new function named binned_statistic() has been added which is a wrapper for
the binned_statistic() function in scipy.stats but also can return the reverse
indices from the binning operation identical to the reverse indices oepration in
IDL's histogram.

In my_DSP_modules.py,

(*) New polyphase filter bank related functions, namely, PFB_FIR_coeff(), 
apply_PFB_filter(), PFB_shape(), sinewave(), and pfbshape() have been added.
These are untested and highly experimental. Documentation has to be provided.

---------------------------------------------------------------------------------
from v1.02 of general:
=====================

In geometry.py,

(*) Raising of few exceptions have been fixed.

In my_DSP_modules.py,

(*) In function windowing(), replaced the estimation of area using trapz() with
sum() even if the latter is less accurate in order to be more consistent with FFT
usage downstream.
(*) Added a function PFB_empirical() which empirically generates a polyphase
filter bank. 

In catalog.py, 

(*) Added a new attribute src_shape which is initialized by the newly included 
input parameter in the __init__() member function of class Catalog. The src_shape 
will consist of three elements, namely, major axis FWHM, minor axis FWHM, and 
position angle (degrees), for each source. The docstring has been modified
accordingly. 
(*) Added a new input parameter src_shape_units to member function __init__()
that specifies the units of the major and minor axes, and position angle. The
docstring has been modified accordingly.

---------------------------------------------------------------------------------
from v1.01 of general:
=====================

(*) Added a new module named foregrounds.py.
(*) Added a function power_law_spectral_index() which computes a single power law
spectral index when flux densities and corresponding frequencies are specified.

In my_DSP_modules.py,

(*) function shaping was modified to handle when the window shape is specified in
both lower and upper case letters
(*) Created a window shaping function windowing() which creates a window shape 
with optional padding, and centering capabilities. Differs from shaping() in that 
whole number of samples are specified instead of a fraction for padding.

In my_operations.py,

(*) In function reverse(), replaced the usage of sys.exit() with raise of
exceptions.

In catalog.py,

(*) In __init__() of class Catalog, force attributes flux_density and
spectral_index to a numpy vector of non-zero dimensions even if the input 
provides only a single object to be cataloged.

In geometry.py, 

(*) Modified altaz2dircos() so that it handles input altitudes which are negative
(*) Modified altaz2dircos() to check that altitudes lie in the range -90 to +90
degrees, earlier it was checking only the range 0 to 90 degrees.
(*) Rectified the return value in dircos2altaz() from being a 3-column array to a
2-column array. Changed documentation accordingly
(*) In dircos2altaz(), changed usage of numpy absolute() to numpy abs()

---------------------------------------------------------------------------------
from v1.0 of general:
====================

In my_DSP_modules.py,

(*) Moved functions XC() and spectax() from MOFF module to the DSP module.
Changed the module prefix in the concerned calling sequences accordingly.
(*) Added keyword boolean input 'shift' to perform a shift to the correlated
sequence to be compatible for equivalence with FFT based methods. Without shift,
the usual correlated sequence is returned.
(*) Added a function smooth() to smooth a sequence using a moving mean or median 
window
(*) Added a function filter() to create a low/high pass filtered data from the 
input using user supplied filter window specifications

In catalog.py,

(*) Added docstring to all classes and associated member functions
(*) Now input named catalog to the __init__() member function of class SkyModel
is verified to be an instance of class Catalog

In geometry.py,

(*) function altaz2dircos() was found to fail when a 2-element list was supplied
after converting from list to numpy array. Now it is forced to convert to a 
two-dimensional array even if only one list is provided.
(*) Moved the routine baseline_generator from geometry.py to interferometry.py

---------------------------------------------------------------------------------

from v1.2 of python-trials:
==========================

In geometry.py,

(*) Added docstring to class Point and its member functions
(*) Instance of Point class can now be initiated with a numpy array of
coordinates
(*) An instance can now be initialized using another instance of Point class
(*) Added operator overloading __abs__() to compute the magnitude of the vector
(*) Added overloaded comparison operators for <, <=, >, >=, and == to compare
the magnitudes of two vectors

In my_DSP_modules.py,

(*) Added a new function shaping() to return rectangular or Blackman-Nuttall 
windows. Read docstring for more details.
(*) Added new function downsampler() to downsample a given data set either
in intervals of integral multiples or non-integral intervals through 
interpolation.
(*) Added new function upsampler() to upsample a given data set through 
interpolation.

In my_gridding_modules.py,

(*) interpolate module in scipy is separately imported instead of a 
direct call using scipy.interpolate
(*) Modified conv_grid2d() to handle xc, yc, xkern, ykern, xgrid, ygrid,
and kernel not only as list inputs but also as numpy arrays
(*) Modified conv_grid1d() to handle xc, xkern, xgrid, ygrid, and kernel
not only as list inputs but also as numpy arrays
(*) Modified conv_grid1d() to perform complex interpolation depending on
input data type
(*) Modified conv_grid2d() to perform complex interpolation depending on
input data type
