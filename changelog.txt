From c7d618e (skymod):
=====================

In astroutils/catalog.py,

(*) Import astroutils
(*) In member function save() of class SkyModel, save the githash of
the AstroUtils version
(*) In member function __init__() of class SkyModel, read or assign
the astroutils_githash attribute. Update class and member function
docstring accordingly

From ca0ab4e (skymod):
=====================

In astroutils/catalog.py,

(*) In member function save() of class SkyModel, save the values in
key 'flux-offset' of attribute spec_parms
(*) In member function __init__() of class SkyModel, read the values 
into key 'flux-offset' of attribute spec_parms

From f785a23 (skymod):
=====================

In astroutils/catalog.py,

(*) In function diffuse_radio_sky_model(), pass explicit
initialization parameters in call to GlobalSkyModel2016() of the
PyGSM module
(*) Generate gsm2016 output initially in Rayleigh-Jeans temperature
units and then convert to flux density.

From 4c4e815 (skymod):
=====================

In astroutils/catalog.py,

(*) In function diffuse_radio_sky_model(), pass explicit
initialization parameters in call to GlobalSkyModel() of the
PyGSM module

From eb82f6b (master):
=====================

In astroutils/catalog.py,

(*) Import Pchipinterpolator from scipy.interpolate
(*) In member function __init__() of class SkyModel, remove some
redundant statements and commented lines
(*) In member function __init__() of class SkyModel, load spectrum
into returned instance of class SkyModel only if input keyword
load_spectrum is set to True
(*) In member function subset() of class SkyModel, change default
value of input keyword interp_method to 'pchip'. Update member
function docstring accordingly
(*) In member function subset() of class SkyModel, change input
indices to outloc and make same changes throughout the body of the
member function. Update member function docstring accordingly
(*) In member function generate_spectrum() of class SkyModel, include
'pchip' as a spectral interpolation method and make it also the
default method. Update member function docstring accordingly
(*) In member function save() of class SkyModel, remove some obsolete
commented and redundant lines, and assign value to 'spec_extfile' in
the saved file

From 127cda5 (test):
===================

In astroutils/geometry.py,

(*) In function parabola_parameters(), fix bug in determining
number of input parameters specified. Return the full (not half)
opening angle in degrees (not radians). Update function docstring
accordingly

In astroutils/tests/conftest.py,

(*) Add parabolaparms dictionary
(*) Add fixture parabola_parms()

In astroutils/tests/test_geometry.py,

(*) Add pytest fixture-based test_parabola_parameters()

From 509a911 (test):
===================

In setup.py,

(*) Remove pytest-runner from setup requirements

In astroutils/tests/test_geometry.py,

(*) Remove obsolete, commented lines of code 

From 2ee45cd (master):
=====================

In astroutils/tests/conftest.py,

(*) Add lonlat1, lonlat2, and cartesian_diffang values
(*) Add fixture sph_dist()

In astroutils/tests/test_geometry.py,

(*) Update test_sphdist() to be pytest fixture-based

From a6a80db (master):
=====================

In astroutils/catalog.py,

(*) Make import of PyGSM module optional and only if it is
installed

From 0bc6e41 (test):
===================

In astroutils/tests/conftest.py,

(*) Minor syntax update

In astroutils/tests/test_geometry.py,

(*) Update test_sph2xyz() to be pytest fixture-based

From f59fc29 (geometry):
=======================

In astroutils/geometry.py,

(*) Fix bug in function sph2xyz() where the x and y values were
interchanged. Update function docstring to make this clear.

From 2edd51c (test):
===================

In astroutils/tests/conftest.py,

(*) Add r_lat_lon values
(*) Add fixtures sph_to_xyz() and xyz_to_sph()

In astroutils/tests/test_geometry.py,

(*) Update test_xyz2sph() to be pytest fixture-based

From 814b251 (test):
===================

In astroutils/tests/conftest.py,

(*) Add enu and xyz values
(*) Add fixtures enu_to_xyz() and xyz_to_enu()

In astroutils/tests/test_geometry.py,

(*) Update test_xyz2enu() and test_enu2xyz() to be pytest
fixture-based

From 0c3926b (test):
===================

In astroutils/tests/test_geometry.py,

(*) Remove obsolete and commented old version of test_hadec2altaz()

From 0826a8a (test):
===================

In astroutils/tests/conftest.py,

(*) Add fixture hadec_to_altaz()

In astroutils/tests/test_geometry.py,

(*) Update test_hadec2altaz() with pytest's fixture-based
test_hadec2altaz()

From 2c3a326 (master):
=====================

In astroutils/tests/conftest.py,

(*) Add values of hadec and latitude
(*) Add fixture altaz_to_dircos()
(*) Update values of altaz and dircos
(*) Update fixtures altaz_to_dircos() and dircos_to_altaz()

In astroutils/tests/test_geometry.py,

(*) Update test_altaz2hadec() with pytest's fixture-based
test_altaz2hadec()

From e09bcbc (geometry):
=======================

In astroutils/geometry.py,

(*) In function altaz2hadec(), re-fix indeterminate value for HA when
both latitude and dec are pointed at the poles.

From 60223f0 (geometry):
=======================

In astroutils/geometry.py,

(*) In function altaz2hadec(), fix indeterminate value for HA when
both latitude and dec are pointed at the poles.
(*) Replace calls to NP.absolute() with NP.abs()

From a385a37 (master):
=====================

In astroutils/geometry.py,

(*) In function altaz2hadec(), comment out the condition that
altitude needs to be positive and instead add the condition that
absolute value of altitude should be <= 90 deg.

From d77f2cf (test):
===================

In astroutils/tests/conftest.py,

(*) Add pytest's parametrized fixtures altaz_to_dircos() and
dircos_to_altaz()

In astroutils/tests/test_geometry.py,

(*) Comment out earlier pytest's parametrization test_altaz2dircos()
and alter test_altaz2dircos() and test_dircos2altaz()

From ad3cd22 (test):
===================

(*) Add astroutils/tests/conftest.py to repo

In astroutils/tests/test_geometry.py,

(*) Use pytest parametrize to test_altaz2dircos()

From 34489fc (master):
=====================

(*) Rename astroutils/test/ to astroutils/tests/
(*) Rename astroutils/tests/geometry_test.py to
astroutils/tests/test_geometry.py
(*) Rename astroutils/tests/mathops_test.py to
astroutils/tests/test_mathops.py
(*) Rename astroutils/tests/nonmathops_test.py to
astroutils/tests/test_nonmathops.py

From e20307e (master):
=====================

In astroutils/ephemeris_timing.py,

(*) Remove import of ephem module
(*) Remove the __main__() function that used the ephem module

In setup.py,

(*) Remove pyephem requirements in install and setup

From b9af280 (master), b254cdb (skymod):
=======================================

(*) Bring updates in master branch on to skymod branch 

From a431233 (master):
=====================

(*) Add 21cmforest codes under astroutils/examples/codes/21cmforest/

From 6dfe91e (master):
=====================

In astroutils/geometry.py,

(*) In function altaz2hadec(), check for input shape of altaz and
prepare it to the right shape before the transformation.
(*) In function hadec2altaz(), check for input shape of hadec and
prepare it to the right shape before transformation

From 1be7583 (master):
=====================

(*) Add folders astroutils/examples/codes/lightcone_operations/ and
its contents to repo

In setup.py,

(*) Make changes to install the example codes listed above in the
installation
(*) Make changes to install examples/catalogops/*.yaml during the
installation

From 948c4d5 (master):
=====================

In astroutils/__init__.py,

(*) Import os module
(*) Read and set __githash__

From acbc92a (setup):
====================

In README.rst,

(*) Add note that it is essential to install scikit-image directly from
conda

From 46dda13 (setup):
====================

In README.rst,

(*) Mention that the dependency scikit-image should be installed
through conda

From 8053660 (setup):
====================

In setupy.py,

(*) Update scikit-image version to <0.15 for compatibility

From 53865f0 (master):
=====================

In setupy.py,

(*) Include scikit-image as a dependency

From 91ef554 (ephemeris):
========================

In astroutils/ephemeris_timing.py,

(*) Import copy module

From bf49f4a (ephemeris):
========================

In astroutils/ephemeris_timing.py,

(*) Import warnings
(*) Add functions radec2altaz() and altaz2radec() with docstring to
convert between RA-Dec and Alt-Az with accurate ephemeris based on
Astropy routines.
(*) In functions hadec2radec() and radec2hadec(), make input epoch_RA
default to 2000.0 instead of None. Also, adjust the default assignment
of obstime accordingly. Update docstrings accordingly
(*) Make minor changes in docstrings of functions hadec2radec() and
radec2hadec()
(*) Fix bugs in checking of input time_type in function hadec2radec() 
and radec2hadec()

From a8c1dde (master):
=====================

In astroutils/ephemeris_timing.py,

(*) Add functions radec2hadec() and hadec2radec() with docstring to
convert between RA-Dec and HA-Dec with accurate ephemeris based on
Astropy routines.

From bb6acdb (master):
=====================

In astroutils/mathops.py,

(*) In function array_trace(), output now also contains the weights
of the offset diagonals over which trace was computed. Update function
docstring accordingly

From 2182a2f (master):
=====================

In astroutils/mathops.py,

(*) In function tile(), typecast input reps to floating point to
avoid rounding errors

From cd243a5 (master):
=====================

In astroutils/mathops.py,

(*) Add function tile() along with docstring to perform a
generalized version of numpy.tile() including mirrored repeats of
specified axes and non-integer number of tiles.

From df9477f (master):
=====================

In astroutils/catalog.py,

(*) Read and write attribute frequency from/to HDF5 skymodel file
(*) In case of functional spectral form, use key 'freq-ref' in the
HDF5 file for the attribute spec_parms['freq-ref']

From 29c310a (ephemeris):
========================

In astroutils/ephemeris_timing.py,

(*) Fix bug in julian_date_from_LAST()

From e1af3b1 (ephemeris):
========================

In astroutils/ephemeris_timing.py,

(*) Add function julian_date_from_LAST() with docstring
(*) Update docstring of function equation_of_equinoxes()

From a9bfc25 (master):
=====================

In astroutils/ephemeris_timing.py,

(*) Add function equation_of_equinoxes() with docstring

From d979f46 (master):
=====================

In astroutils/mathops.py,

(*) Fix assertion bug in function interpolate_array()

In astroutils/DSP_modules.py,

(*) Change call to interpolation in function downsampler()

From 922bc14 (master):
=====================

In astroutils/mathops.py,

(*) Fix sorting bug in function interpolate_array()

From 046b67f (master):
=====================

In astroutils/geometry.py,

(*) In input ref_info to function enu2ecef(), replace key 'xyz' with
'alt'. Calculate ECEF coordinates from this updated information.
Update docstring accordingly

From 6e4ce32 (master):
=====================

In astroutils/geometry.py,

(*) Fix bug in function enu2ecef() by rectifying keys of input
dictionary ref_info

From c83304b (master):
=====================

In astroutils/mathops.py,

(*) Minor changes in docstrings throughout

From edaf9d9 (mathops):
======================

In astroutils/mathops.py,

(*) Add function is_broadcastable() along with docstring

From ad045b4 (mathops):
======================

In astroutils/mathops.py,

(*) Remove commented block in function interpolate_masked_array_1D()

From 7089a3a (master):
=====================

In astroutils/mathops.py,

(*) Update inputs and processing under function
interpolate_masked_array_1D(). Update function docstring accordingly

From fe60fc4 (master):
=====================

In astroutils/lookup_operations.py,

(*) Update docstring of function find_1NN()

From 98a51ca (master):
=====================

In astroutils/mathops.py,

(*) Add function array_trace() along with docstring

From 66c3c11 (imgcutout):
========================

In scripts/match_catalogs.py,

(*) Fix indexing error at the time of writing out HDF5 file

From 81fa063 (imgcutout):
========================

In astroutils/examples/catalogops/catalog_match_parms.yaml,

(*) Add option to load object name from input reference catalog

In scripts/match_catalogs.py,

(*) Add option to read and save object name from input reference
catalog into the output HDF5 file

From 3321bdb (imgcutout):
========================

(*) Add scripts/retrieve_image_cutouts.py to repo
(*) Add astroutils/examples/catalogops/catalog_match_parms.yaml to
repo

In scripts/retrieve_image_cutouts.py,

(*) Minor changes to comments and descriptions

From d2c4a67 (imgcutout):
========================

In scripts/retrieve_image_cutouts.py,

(*) Add option to query or download image cutouts

In astroutils/examples/image_cutout/image_cutout_parms.yaml,

(*) Add action parameter to be set to query or download

From 7bd579c (imgcutout):
========================

In scripts/retrieve_image_cutouts.py,

(*) Print useful progress messages

From 340d1cd (imgcutout):
========================

In scripts/retrieve_image_cutouts.py,

(*) Issue warning instead of aborting when non-standard FITS keywords
are found.
(*) Remove import of copy module

From daf34bf (master), 3e44666 (imgcutout):
==========================================

(*) Merge imgcutout branch onto master

From 3d39189 (master):
=====================

In setup.py,

(*) Add version range for package dependency Astropy. Astropy version
can now range from >=1.0 to <3.0. It avoids requirement of Astropy
version that requires Python 3.

From 3d39189 (master):
=====================

(*) Add retrieve_image_cutouts.py in scripts/
(*) Add image_cutout/image_cutout_parms.yaml in astroutils/examples/

In setup.py,

(*) Add packages astroquery and beautifulsoup4 under install_requires
and setup_requires

From 238ba01 (phases):
=====================

In astroutils/mathops.py,

(*) Update docstring of function smooth_masked_array_1D()

From 5f1bce3 (phases):
=====================

In astroutils/mathops.py,

(*) Rename function interpolate_complex_array_1D() to
interpolate_masked_array_1D()
(*) Rename and replace input variable containing 'cmplxarr' with 'arr'
(*) Update docstring of function interpolate_masked_array_1D().
(*) In function interpolate_masked_array_1D(), check for complex
data type before applying fix_ampl
(*) In function interpolate_masked_array_1D(), update functionality
to handle both complex and real array inputs
(*) In function interpolate_masked_array_1D(), update functionality
to use scipy.interpolate.interp1d() even if masked values are not
aligned across the array along the specified interpolation axis

From 098d6f0 (phases):
=====================

In astroutils/mathops.py,

(*) Import modules from skimage
(*) Add function interpolate_phase_1D() along with docstring to unwrap
and interpolate phases along a specified axis that are input as masked
arrays which contain missing values
(*) In function phase_unwrap_1D(), reshape the output to match the
input array shape
(*) In function interpolate_complex_array_1D(), replace
collapsed_freq_mask variable with axis_mask, and minor change to
comments

From 556081a (phases):
=====================

In astroutils/mathops.py,

(*) Add function interpolate_complex_array_1D() along with docstring
to interpolate complex arrays or complex exponentials constrained to
unit amplitude that are masked arrays which contain missing values
along a specified axis

From 27f3a7b (master):
=====================

In astroutils/mathops.py,

(*) Import modules numpy.ma, skimage.restoration, and
astropy.convolution
(*) Add function smooth_masked_array_1D() along with docstring
(*) Add function phase_unwrap_1D() along with docstring

From d7c468f (cosmotiling-adv):
==============================

In astroutils/examples/cosmotile_parms.yaml,

(*) Minor update to description of parameter infile_suffix
(*) Minor update to description of parameter z_identifier

From 06a9378 (cosmotiling-adv), 971d0be (master):
================================================

(*) Merge updates on master branch onto cosmotiling-adv branch

From e5e2950 (cosmotiling-adv):
==============================

In astroutils/nonmathops.py,

(*) Import warnings module

From 23f9521 (cosmotiling-adv):
==============================

In astroutils/cosmotile.py,

(*) Import time module
(*) Print status and diagnostic messages including time consumed for
reading 21cmfast cubes and interpolating coeval cubes
(*) Add function fastread_21cmfast_cube() along with docstring which
is a faster routine and a replacement for read_21cmfast_cube()

In scripts/run_cosmotile.py,

(*) Update to use different types of parallelization by binning
output frequencies into bins of input frequencies. This was supposed
to have been included in the previous commit but was not. Now uses
prll_type parameter 
(*) Import AstroUtils module mathops

From dbddf82 (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) In interp_coevalcubes(), add type checking on input invals
(*) In interp_coevalcubes(), update comparison of invals and outvals
to determine if interpolation is required
(*) In coeval_interp_cube_to_sphere_surface_wrapper(), update to
process tiling of many cubes in series

In astroutils/examples/cosmotile/cosmotile_parms.yaml,

(*) Add parameter to specify type of parallel processing that is
called prll_type

In scripts/run_cosmotile.py,

(*) Update to handle different types of parallelization by binning
output frequencies into bins of input frequencies

In astroutils/mathops.py,

(*) In interpolate_array(), update comparison of inploc and outloc
to determine if interpolation is required

From 7c5ac03 (master):
=====================

In astroutils/geometry.py,

(*) Remove import of ipdb

From f3fb63b (master):
=====================

In astroutils/DSP_modules.py,

(*) Add parallel processing wrapper functions unwrap_FFT2D() and
unwrap_IFFT2D() for numpy.fft.fft2() and numpy.fft.ifft2()
respectively

In changelog.txt,

(*) Correct message of commit ff23f91 (master)

From ff23f91 (master):
=====================

In astroutils/cosmotile.py,

(*) Minor update to docstring of function write_coeval_cube()

From ad56efa (master):
=====================

(*) Add astroutils/statistics.py to the repository

From 313beb0 (resize_hdf5):
==========================

In astroutils/cosmotile.py,

(*) Update append_lightcone_surfaces() to modify the is_healpix
value if necessary

In scripts/run_cosmotile.py,

(*) Update to use append functionality in case of large sized light
cone surfaces

In astroutils/examples/cosmotile/cosmotile_parms.yaml,

(*) Add parameter write_mode to write light cone surfaces all at once
or append incrementally to HDF5 file

From a24ad0a (resize_hdf5):
==========================

In astroutils/cosmotile.py,

(*) Add function append_lightcone_surfaces() along with docstring
to append light cone surfaces to the one created by
write_lightcone_surfaces()

From 7a4e052 (resize_hdf5):
==========================

In astroutils/cosmotile.py,

(*) Modify function write_lightcone_surfaces() to keep the data in
the HDF5 file resizeable

From 7764aae (resize_hdf5):
==========================

In astroutils/catalog.py,

(*) Create function append_SkyModel_file() to append data from an
instance of class SkyModel to an already existing skymodel file

In scripts/run_cosmotile.py,

(*) Update to use function append_SkyModel_file() in
astroutils/catalog.py to update an existing sky model file with newer
instances of class SkyModel

From 664479b (cosmotiling):
==========================

In astroutils/catalog.py,

(*) Create resizeable data sets when instance of class SkyModel is
written to HDF5 file

From 9f0ce1b (master):
=====================

In scripts/run_cosmotile.py,

(*) Import constants from astroutils and astropy
(*) Introduce the Temperature to flux density scaling factor before
writing to skymod file

In astroutils/examples/cosmotile/cosmotile_parms.yaml,

(*) Update description for angres

From 39d70c7 (master):
=====================

In README.rst,

(*) Minor updates to documentation

From f452eaa (master):
=====================

In README.rst,

(*) Minor updates to documentation

From 13eced4 (master):
=====================

In setup.py,

(*) Replace README.txt with README.rst

From 80a5fad (master):
=====================

(*) Rename changelog_general.txt to changelog.txt

From 95b284e (master):
=====================

(*) Add README.rst to the repo with basic installation and usage
instructions

From 1149682 (master):
=====================

(*) Update and add .gitignore to repo

From 82519d5 (master):
=====================

In astroutils/test/geometry_test.py,

(*) Add test_xyz2sph() to test xyz2sph() in geometry.py

From eb6a5d4 (master):
=====================

In astroutils/geometry.py,

(*) Add triangle solving routines along with docstrings -- aaas(),
sss(), sas(), ssa(), and trisolve()
(*) Import print_function, absolute_import, sys and warnings
(*) Insert system-generated tolerance variable called epsilon

From dce1a17 (master):
=====================

In astroutils/constants.py,

(*) Add rest frame frequencies of CO transitions 1-0, and 2-1. 

From 132a83e (cosmotiling):
==========================

In astroutils/nonmathops.py,

(*) Import warnings module

From 5db2c3d (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Add input process_stage as a key in input inpdict in
cube_smooth_downsample_save(). Update docstring accordingly. This will
determine if processed cube is read from a HDF5 file or a raw cube
from a binary file
(*) Add input process_stage as an input in interp_coevalcubes() along
with docstring. This input will determine if coeval cubes to be read
are processed HDF5 files or raw binary files
(*) Add function read_coeval_cube() along with docstring to read
processed coeval cubes from HDF5 file

In astroutils/examples/cosmotile/cosmotile_parms.yaml,

(*) Add parameter process_stage to determine if input coeval cubes
are processed or raw

In scripts/run_cosmotile.py,

(*) Read in process_stage parameter and process accordingly
(*) Change parallel processing from using pool.imap() to pool.map()

From d9230c8 (cosmotiling):
==========================

(*) Add astroutils/examples/cosmotile/cosmosmooth_parms.yaml to repo
(*) Add scripts/smooth_cosmocubes.py to repo

In astroutils/cosmotile.py,

(*) Add functions cube_smooth_downsample_save(), write_coeval_cube()
and smooth_downsample_cube() along with docstrings.

From a90ecf7 (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Add function fastread_21cmfast_cube() that replaces the
previous and slow read_21cmfast_cube() 
(*) Import time module to track time consumption in functions 
interp_coevalcubes() and convert_coevalcube_to_sphere_surface()

In scripts/run_cosmotile.py,

(*) Use multiprocessing.imap() to do parallel processing

From dbddf82 (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) In interp_coevalcubes(), add type checking on input invals
(*) In interp_coevalcubes(), update comparison of invals and outvals
to determine if interpolation is required

In astroutils/mathops.py,

(*) In interpolate_array(), update comparison of inploc and outloc
to determine if interpolation is required

From f9e1560 (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Add input theta_phi and associated docstring in all functions
wherever healpix nside input was involved.
(*) Rename convert_coevalcube_to_healpix_arg_splitter() to
convert_coevalcube_to_sphere_surface_arg_splitter()
(*) Rename convert_coevalcube_to_healpix_inpdict() to
convert_coevalcube_to_sphere_surface_inpdict()
(*) Rename convert_coevalcube_to_healpix() to
convert_coevalcube_to_sphere_surface()
(*) Rename convert_coevalcubes_to_healpix_surfaces() to
convert_coevalcubes_to_sphere_surfaces()
(*) Rename coevalcube_interp_tile2hpx_wrapper_arg_splitter() to
coeval_interp_cube_to_sphere_surface_wrapper_arg_splitter()
(*) Rename coevalcube_interp_tile2hpx_wrapper() to
coeval_interp_cube_to_sphere_surface_wrapper()
(*) Update all docstrings to be consistent with these changes

In scripts/run_cosmotile.py,

(*) Add options to specify ranges of theta and phi for generating
fractional spherical patches instead of using nside and generating
whole spherical surfaces

In astroutils/examples/cosmotile/cosmotile_parms.yaml,

(*) Add theta_range, phi_range and angres inputs under "output"
parameters

From ef5df47 (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Add function write_lightcone_catalog() along with docstring to
write lightcone surfaces to instance of class SkyModel

In scripts/run_cosmotile.py,

(*) Update to save to skymodel file

In astroutils/examples/cosmotile/cosmotile_parms.yaml,

(*) Add parameters to save to skymodel file

In astroutils/catalog.py,

(*) Fix bugs in saving and loading attribute src_shape in member
functions __init__() and save() of class SkyModel

From 141ff69 (cosmotiling):
==========================

(*) Add astroutils/examples folder and its contents to git repo

In astroutils/cosmotile.py,

(*) Lots of syntax bug fixes
(*) Add function write_lightcone_surfaces() along with docstring
to write light cone surfaces to HDF5 file

In scripts/run_cosmotile.py,

(*) Lots of syntax bug fixes
(*) Can run in serial or parallel

In setup.py,

(*) Import appropriate modules and include contents of scripts and
examples folder

In astroutils/mathops.py,

(*) Minor bug fix in interpolate_array() function

From e99ff5c (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Minor change in interp_coevalcubes()

In scripts/run_cosmotile.py,

(*) Update body to run cosmotiling in series or parallel

From dc267b2 (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Add function coevalcube_interp_tile2hpx_wrapper_arg_splitter() for
parallelizing function coevalcube_interp_tile2hpx_wrapper()

From 74a95d8 (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Add function coevalcube_interp_tile2hpx_wrapper() along with 
docstring that now takes consolidated dictionary inputs for
interpolation and tiling and serves as a wrapper for those 
functionalities by wrapping interp_coevalcubes() and 
convert_coevalcube_to_healpix()

From 36862cd (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Add function convert_coevalcube_to_healpix_inpdict() along with 
docstring that now takes a consolidated dictionary input and is a 
wrapper for convert_coevalcube_to_healpix()

From ef074dd (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Add function interp_coevalcubes_inpdict() along with docstring
that now takes a consolidated dictionary input.
(*) Revert function interp_coevalcubes() to its previous version
where multiple items are given as inputs individually

From 95a22e3 (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Change inputs from multiple items to consolidated dictionary
inpdict in function interp_coevalcubes(). Update docstring
accordingly

From 77c0ff5 (cosmotiling):
==========================

In astroutils/mathops.py,

(*) Check for closeness of inplocs and outlocs in interpolate_array()
and if they are close, return the inparray without interpolation

In astroutils/cosmotile.py,

(*) Check for closeness of invals and outvals in interp_coevalcubes()
and if they are close, return the inpcubes without interpolation
(*) Add function read_21cmfast_cube() along with docstring

From 1827ead (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Add functions interp_coevalcubes_arg_splitter() and
interp_coevalcubes() along with docstrings. These functions will
interpolate coeval cosmological cubes at specified parameter values
such as along redshift or frequency
(*) Import mathops module from astroutils

In scripts/run_cosmotile.py,

(*) Import glob

From 530f289 (cosmotiling):
==========================

(*) Add scripts folder and its contents to repo

In setup.py,

(*) Add scripts folder specification

In scripts/

(*) Start working on file run_cosmotile.py

From 60cca6f (cosmotiling):
==========================

In astroutils/cosmotile.py,

(*) Import warnings module
(*) Introduce serial processing option in function
convert_coevalcubes_to_healpix_surfaces(). Update docstring
accordingly

From 314855a (cosmotiling):
==========================

In astroutils,

(*) Rename tilesky.py to cosmotile.py

From 6f97d5a (cosmotiling):
==========================

In astroutils/tilesky.py,

(*) Rename function names convert_cosmocube_to_healpix_arg_splitter()
to convert_coevalcube_to_healpix_arg_splitter(), 
convert_cosmocube_to_healpix() to convert_coevalcube_to_healpix() and
convert_cosmocubes_to_healpix_surfaces() to
convert_coevalcubes_to_healpix_surfaces(). Update docstrings
accordingly

From 3e5bc9c (cosmotiling):
==========================

In astroutils/tilesky.py,

(*) Fix bug in calculating pixel index and its passing to interpn()
in function convert_cosmocube_to_healpix()

From 6d69062 (cosmotiling):
==========================

In astroutils/tilesky.py,

(*) Change input from z to redshift in convert_cosmocube_to_healpix()
(*) Update docstring of convert_cosmocube_to_healpix() to be
consistent with the change from usage of z to redshift
(*) Update body of function convert_cosmocube_to_healpix() to be
consistent with the change from usage of z to redshift
(*) Update docstring of convert_cosmocubes_to_healpix_surfaces() on
the different inputs to be consistent with the body of the function
(*) Update docstring of convert_cosmocubes_to_healpix_surfaces() on
input los_axis

From a79b456 (cosmotiling):
==========================

In astroutils/tilesky.py,

(*) Change function names convert_cube_to_healpix_arg_splitter() to
convert_cosmocube_to_healpix_arg_splitter(), convert_cube_to_healpix()
to convert_cosmocube_to_healpix() and
convert_cubes_to_healpix_surfaces() to
convert_cosmocubes_to_healpix_surfaces()

From 7137f6a (cosmotiling):
==========================

In astroutils/tilesky.py,

(*) Minor changes to docstrings throughout

From 0111f5b (cosmotiling), 82c61a3 (master):
============================================

(*) Merge updates from master branch onto cosmotiling branch

From c3b498b (cosmotiling):
==========================

In astroutils/tilesky.py,

(*) Add function convert_cubes_to_healpix_surfaces() along with
docstring to convert cubes to healpix surfaces at different redshifts

From 6cba82f (cosmotiling):
==========================

In astroutils/tilesky.py,

(*) Add function convert_cube_to_healpix_arg_splitter() to parse
arguments and pass to convert_cube_to_healpix() in preparing to set
up for parallel processing using multiprocessing

From 69228da (cosmotiling):
==========================

(*) Add tilesky.py under astroutils/ to repository

In astroutils/tilesky.py,

(*) Add function convert_cube_to_healpix() along with docstring to
convert a cosmology cube at a given redshift to HEALPIX map at an
observing frequency

In astroutils/mathops.py,

(*) Update docstring of function interpolate_array() with a
description of its functionality

From 6e1825b (master):
=====================

In astroutils/mathops.py,

(*) Add function interpolate_array() along with docstring to 
interpolate a multi-dimensional array along a given axis (this is 
essentially a wrapper to scipy.interpolate.interp1d with some 
modifications for out of bound conditions)

From 06e5b12 (master):
=====================

In astroutils/geometry.py,

(*) Fix bugs in parabola angles in case of non-zero tilt

From e87c485 (skymod), 06e5b12 (master):
=======================================

(*) Bring updates in master branch onto skymod branch

From 2984b41 (skymod):
=====================

In astroutils/catalog.py,

(*) Add input keyword verbose in healpix_smooth_and_udgrade() and in
calls to healpy.smoothing() which is set to False when calling from
diffuse_radio_sky_model()

From fdb3930 (skymod):
=====================

In astroutils/catalog.py,

(*) Fix indexing bugs in member function generate_spectrum() of class
SkyModel

From d787f81 (skymod):
=====================

In astroutils/catalog.py,

(*) Import multiprocessing, itertools, progressbar and pygsm modules
(*) Add functions healpix_smooth_and_udgrade_arg_splitter() and
healpix_smooth_and_udgrade() to handle healpix smoothing and up/down
grading in multiprocessing
(*) Add function diffuse_radio_sky_model() along with docstring to
generate global sky model from the PyGSM module

From 4f8a401 (skymod):
=====================

In astroutils/catalog.py,

(*) Add input load_spectrum in __init__() member function of class
SkyModel to indicate if a full spectrum is to be loaded or not if
found available in the init_file. Update __init__() member function
and its docstring accordingly

From a36abf9 (skymod):
=====================

In astroutils/catalog.py,

(*) Add option for power law interpolation in member function
generate_spectrum() of class SkyModel. Update member function
docstring accordingly

From 8ee6c86 (skymod):
=====================

In astroutils/catalog.py,

(*) Add and initialize attributes is_healpix and healpix_ordering in
__init__() member function of class SkyModel.
(*) Save attributes is_healpix and healpix_ordering in save() member
function of class SkyModel

From 7af6086 (skymod):
=====================

In astroutils/catalog.py,

(*) Add member function load_external_spectrum() along with docstring
under class SkyModel to load and externally stored spectrum into the
attribute spectrum

From e5bed00 (skymod):
=====================

In astroutils/catalog.py,

(*) Add input extspec_action in member function save() of class
SkyModel to unload full spectrum on to the external file and unload
it from carrying it in the attribute spectrum. Update member function
docstring accordingly
(*) Make minor change in defining a chunk size

From 08165c8 (skymod):
=====================

In astroutils/catalog.py,

(*) Remove commented and now defunct member function
retrieve_external_spectrum() under class SkyModel. Update class
docstring accordingly

From 8475cfa (skymod):
=====================

In astroutils/catalog.py,

(*) Add function retrieve_external_spectrum() along with docstring to
retrieve externally stored spectrum
(*) Comment out member function retrieve_external_spectrum() under
class SkyModel
(*) Update all usage of retrieve_external_spectrum() in class SkyModel

From 6fd3343 (skymod):
=====================

In astroutils/catalog.py,

(*) Update member function generate_spectrum() in class SkyModel to
not interpolate if output frequencies are identical to that in
attribute frequency
(*) Fix bugs in member function generate_spectrum() in class SkyModel
to correctly interpolate along the spectral axis

From 25ca29c (skymod):
=====================

In astroutils/catalog.py,

(*) Bug fix in __init__() member function of class SkyModel to
initialize src_shape related attributes even when spec_type is set to
'spectrum'

From 68282ac (skymod):
=====================

In astroutils/catalog.py,

(*) Minor bug fix in __init__() member function of class SkyModel

From 4b3a811 (skymod):
=====================

In astroutils/catalog.py,

(*) Use member function retrieve_external_spectrum() in member
function save() of class SkyModel to write information about attribute
spec_extfile which externally stores the spectrum

From 06801ac (skymod):
=====================

In astroutils/catalog.py,

(*) Use member function retrieve_external_spectrum() in member
function generate_spectrum() of class SkyModel to include
retrieving spectrum from external file

From 52951be (skymod):
=====================

In astroutils/catalog.py,

(*) Use member function retrieve_external_spectrum() in member
function subset() of class SkyModel to retrieve and initialize
from externally stored spectrum

From d252f4a (skymod):
=====================

In astroutils/catalog.py,

(*) Use member function retrieve_external_spectrum() in member
function __init__() of class SkyModel to check if externally stored
spectrum is compatible with other specified dimensions

From cf0f0f1 (skymod):
=====================

In astroutils/catalog.py,

(*) Add member function retrieve_external_spectrum() along with
docstring under class SkyModel to retrieve externally stored spectrum.
Update class docstring accordingly

From b39d8fd (skymod):
=====================

In astroutils/catalog.py,

(*) Add and initialize attribute spec_extfile in __init__() member
function of class SkyModel. Update docstring of member function and
class accordingly

From 1c31fa1 (skmod):
====================

In astroutils/catalog.py,

(*) Add input interp_method in member function generate_spectrum() 
of class SkyModel to be able to interpolate along spectral axis if
attribute spec_type is set to 'spectrum'. For this case, it now
returns spectra generated for a subset of all object locations.
Update docstring of member function accordingly

From a401254 (master):
=====================

In astroutils/catalog.py,

(*) Add input ind in member function generate_spectrum() of class
SkyModel. It now returns spectra generated for a subset of all
object locations. Update docstring of member function accordingly

From 8077339 (master):
=====================

In astroutils/geometry.py,

(*) Add function sample_paraboloid() along with docstring to sample
a paraboloid surface specified by focal length and opening angle.

In MANIFEST.in,

(*) Add syntax changes in recursive-include statements

From af06c0f (master):
=====================

In astroutils/geometry.py,

(*) Add function sample_parabola() along with docstring to sample
a parabolic curve specified by focal length and opening angle. 

From 218efbc (master):
=====================

In astroutils/geometry.py,

(*) Add function xyz2sph() along with docstring to convert from
XYZ coordinates to spherical coordinates in radius, latitude and
longitude

From 7337df6 (master):
=====================

In astroutils/geometry.py,

(*) Add function parabola_parameters() along with docstring to
compute parameters of a parabola

From a9c49d1 (master):
=====================

In astroutils/geometry.py,

(*) Handle scalar or vector inputs in ecef2lla() and lla2ecef()

From a401254 (master):
=====================

In astroutils/geometry.py,

(*) Add value checks in ecef2lla()

From eee7159 (master):
=====================

In astroutils/nonmathops.py,

(*) Import h5py and ast modules
(*) Add functions recursively_save_dict_contents_to_group(),
save_dict_to_hdf5(), recursively_load_dict_contents_from_group() and
load_dict_from_hdf5() along with docstrings to convert to and from
HDF5 format and python dictionaries

From 6e1825b (master):
=====================

In astroutils/mathops.py,

(*) Add function percentiles_to_2D_contour_levels() along with
docstring to convert from percentiles to 2D contour levels given a
probability density function

From 0a0a26c (master):
=====================

(*) Add kernel density estimator kernel_density_estimator.py under
astroutils/ and to the repository

From a53e00e (master):
=====================

In astroutils/nonmathops.py,

(*) Add function find_all_occurrences_list1_in_list2() along with
docstring to compute all occurrences of list1 in list2

From 017a21e (small-angles):
===========================

In astroutils/geometry.py,

(*) Take care of small angles and precision issues in altaz2hadec()

From ee98209 (master):
=====================

In astroutils/nonmathops.py,

(*) Add function find_list_in_list() to find index of elements in
input list in a reference list. Added docstring accordingly

From b14d469 (master):
=====================

In astroutils/DSP_modules.py,

(*) Fix typechecking for padding in windowing(), window_fftpow()

From 8f47f75 (master):
=====================

In astroutils/geometry.py,

(*) Fix bug by correcting value of gps_N in ecef2lla() 

From 546f922 (master):
=====================

In astroutils/DSP_modules.py,

(*) Fix typechecking for padding in windowing()

From 44aa517 (master):
=====================

In astroutils/geometry.py,

(*) Fix typechecking bugs in ECEF <--> ENU conversions

From 8464c90 (master):
=====================

In astroutils/geometry.py,

(*) Add function enu2ecef() along with docstring to convert from
local ENU coordinates to XYZ in ECEF coordinates

From 5ad929b (master):
=====================

In astroutils/geometry.py,

(*) Add function ecef2enu() along with docstring to convert from
ECEF XYZ coordinates to local ENU coordinates

From 65668ef (master):
=====================

In astroutils/geometry.py,

(*) Add functions lla2ecef() and ecef2lla() along with docstrings
to convert back and forth between geodetic latitude, longitude,
altitude and XYZ in ECEF coordinates

From 534df49 (master):
=====================

In astroutils/catalog.py,

(*) Update docstrings of member function __init__() and of class
SkyModel

Merge 75abfe4 (master,catalog-save) + 3ea71e1 (pkg):
===================================================

(*) Merge branch pkg onto master

From e04d796 (catalog-save):
===========================

In catalog.py,

(*) Modify subset() member function of class SkyModel to return a
subset instance using the updated requirements for calling the
__init__() member function

From ee1746e (catalog-save):
===========================

In catalog.py,

(*) Add option init_parms in member function __init__() of class
SkyModel. This replaces all the other individual arguments that were
used in intializing earlier. Update docstring accordingly. 

From dabb3d7 (catalog-save):
===========================

In catalog.py,

(*) Add option init_file in member function __init__() of class
SkyModel. Update docstring accordingly.

From 2a882ab (master):
=====================

In catalog.py,

(*) Add option to save sky model in HDF5 format in member function
save() of class SkyModel. Update docstring accordingly.
(*) Import module h5py to save sky model information in HDF5 format

From 607728a (master):
=====================

In my_operations.py,

(*) Insignificant update in docstring of healpix_interp_along_axis()

From c1a87db (master):
=====================

In my_gridding_modules.py,

(*) Add function grid_3d() along with docstring

From 5190e34 (nonmath):
======================

In astroutils/nonmathops.py,

(*) Add function is_dict1_subset_of_dict2() to check if one
dictionary is a subset of another. Also create docstring

In astroutils/test/nonmathops_test.py,

(*) Add tests test_is_dict1_subset_of_dict1_case1() and
test_is_dict1_subset_of_dict1_case2() to test the
function is_dict1_subset_of_dict1() in the module nonmathops.py

From 6fbb2c8 (pkg):
==================

In astroutils/,

(*) Add module nonmathops.py to git repo

In astroutils/nonmathops.py,

(*) Add function recursive_find_notNone_in_dict() to reduce a
dictionary recursively to contain only non-None values. Also
create docstring

In astroutils/test/,

(*) Add test module nonmathops_test.py to git repo

In astroutils/test/nonmathops_test.py,

(*) Add tests test_recursive_find_notNone_in_dict() and
test_recursive_find_notNone_in_allNone_dict() to test the
function function recursive_find_notNone_in_dict() in the
newly created module 

From 109d1eb (pkg):
==================

In setup.py,

(*) Add keywords classifiers, maintainer, and maintainer_email

In astroutils/__init__.py,

(*) Add info on maintainer and maintainer_email

From 03af18c (pkg):
==================

In setup.py,

(*) Add package dependencies under keywords install_requires and
setup_requires

In astroutils/catalog.py,

(*) Remove lines importing and using matplotlib

From f6bd5f6 (pkg):
==================

In mathops.py,
(*) Import correctly renamed module DSP_modules instead of my_DSP_modules

In DSP_modules.py,
(*) Import correctly renamed module mathops instead of my_operations

(*) Rename my_operations_test.py to mathops_test.py
In mathops_test.py,
(*) Import correctly renamed module mathops instead of my_operations

From f8b61b2 (pkg):
==================

(*) Rename modules by removing prefix 'my_' in filenames
(*) Make appropriate changes in modules that use the renamed modules

From d0603dc (pkg):
==================

(*) Rename package from 'generalutils' to 'AstroUtils'
(*) Make ppropriate changes in setup.py, folder structure, and tests

From ec2b1d6 (pkg):
==================

In setup.py,

(*) Modify indentation to 4 spaces

From 89748c9 (pkg), 98e0d2f (utest):
===================================

(*) Merge 89748c9 (pkg) + 98e0d2f (utest)

From beca8d2 (pkg):
==================

In setup.py,

(*) Remove commented lines

From 16def05 (pkg):
==================

In generalutils/__init__.py,

(*) Add metadata used in setup

In setup.py,

(*) Read setup parameters from package __init__.py

From 16def05 (utest):
====================

In geometry_test.py,

(*) Add more tests test_enu2xyz(), test_xyz2enu(), test_sph2xyz(),
test_sphdist(), test_spherematch_1match() and
test_spherematch_allmatch()

From 89688af (utest):
====================

(*) Add more unittest modules
(*) Test package installation
(*) Make init files empty

From 326cdfa (pkg):
==================

(*) Start adding unittest for my_operations.py module

From c1a87db (pkg):
==================

(*) Start making it an installable package

From f7d0b72 (master):
=====================

In my_operations.py,

(*) Enforce double precision in healpix_interp_along_axis()

From 0e76f8d (master):
=====================

In my_DSP_modules.py,

(*) Typecast returned window function in window_fftpow() to float64

From 7a1ebc1 (master):
=====================

In my_DSP_modules.py,

(*) Add keyword input fftpow in window_N2width(). Update docstring
accordingly.
(*) Modify window_N2width() to use newly created function
window_fftpow()

From de4ac5a (master):
=====================

In my_DSP_modules.py,

(*) Add function window_fftpow() to compute window functions of
specified shapes whose FFT is raised to a given power. In the
original domain this can be considered as multiple convolutions
of the power is an integer.

From ca84415 (master):
=====================

In my_DSP_modules.py,

(*) Add keyword input method in function downsampler(). Update
docstring accordingly
(*) Add ability to function downsampler() to resample based on both
FFT-based and interpolation-based methods

From 9a029b0 (master):
=====================

In my_DSP_modules.py,

(*) Add keywords area_normalize and power_normalize in function
window_N2width(). Add conditions to compute fractional width
depending on these keywords. Update docstring accordingly

From dc62745 (master):
=====================

In my_DSP_modules.py,

(*) Add normalization by power by using keyword input power_normalize
in function windowing(). Update docstring accordingly

From ee57554 (master):
=====================

In constants.py,

(*) Add value for sidereal day duration

In catalog.py,

(*) Minor change in docstring in member function generate_spectrum()
of class SkyModel

From 64fa4b3 (master):
=====================

In my_operations.py,

(*) Fix bug in function healpix_interp_along_axis() by zeroing an
entire column to ensure the inverse FFT is real while using FFT-based
interpolation

From 86f12df (master):
=====================

(*) Add writer_module.py to git repo

In my_operations.py,

(*) Add a comment to a line in function healpix_interp_along_axis()

From f5262d8:
============

In my_operations.py,

(*) Modify FFT-based interpolation functionality in
healpix_interp_along_axis()
(*) Import lookup_operations module

From 158e87b:
============

In catalog.py,

(*) Add value checking in save() member function of class SkyModel
before saving certain attributes of the class

From 3b82651:
============

In my_operations.py,

(*) Add more checking to decide whether to interpolate along the
specified axis or not in healpix_interp_along_axis(). Update
docstring accordingly

From 15b9777:
============

In catalog.py,

(*) Add member function save() to class SkyModel with docstring
(*) Update docstring of class SkyModel with descriptions of member
functions to_healpix() and save()

From 12a1a76:
============

In catalog.py,

(*) Add capability to member function subset() of class SkyModel to
create subsets along position as well as spectral direction.
(*) Add input keyword axis to member function subset() of class
SkyModel, update docstring of member function and the class

From e296dbd:
============

In my_operations.py,

(*) Change some special character encoding in docstring to normal
single quotes

From 1c68102:
============

In my_operations.py,

(*) Add function healpix_interp_along_axis() with docstring that can
interpolate using HEALPIX and SciPy routines along spherical angle and
one other specified axis respectively
(*) Remove import of ipdb module

From 4742777:
============

In lookup_operations.py,

(*) Add function lookup_1NN_new() with docstring. Tested.
(*) Add function lookup_NN_new() with docstring. Needs serious
development and testing
(*) Rename input parameter file to outfile in function gen_lookup()
to avoid confusion with python's in-built variable file. Update
docstring accordingly
(*) Rename input parameter file to infile in function read_lookup()
to avoid confusion with python's in-built variable file. Update
docstring accordingly
(*) Minor change to docstring of find_1NN()
(*) Remove commented lines in find_1NN()

From a9bc243:
============

In lookup_operations.py,

(*) Add function find_NN() (with docstring) to compute all nearest
neighbours within a certain radius
(*) Add functions find_NN_arg_splitter() and find_NN_pp() for parallel
processing functionality and not intended to be used directly by the
user
(*) Import itertools module
(*) Comment out printing of process name in case of parallel processing

From 2e757e0:
============

(*) Add ephemeris_timing.py to git repo
(*) At the moment it consists of function gmst2gps() taken from David
Kaplan

From 03a62b4:
============

In my_gridding_modules.py,

(*) Change input keyword from range to ranges in function grid_1d() to
not confuse with in-built function range(). Modify docstring
accordingly
(*) Change input keyword from range to rangelist in function grid_2d()
to not confuse with in-built function range(). Modify docstring
accordingly
(*) Add more rigorous type checking for input keyword pad in function
grid()
(*) Tighten type checking in functions grid_1d() and grid_2d() 

From 26762d3 of general:
=======================

In catalog.py,

(*) Remove commented and defunct class Catalog

In changelog.txt,

(*) Change wrong mention of class Catalog to the correct class
SkyModel in the previous commit

From 08b3d89 of general:
=======================

In catalog.py,

(*) Add member function to_healpix() to class SkyModel
(*) Fix type checking bug in member function generate_spectrum() of
class SkyModel

From ff89e45 of general:
=======================

In my_DSP_modules.py,

(*) Check for out of bounds index in input to interpolating function
in downsampler()

From 9ceee44 of general:
=======================

In my_DSP_modules.py,

(*) Add function window_N2width() to compute effective width of window
functions

From aa7710e of general:
=======================

In catalog.py,

(*) Replace usage of 'freq-width' with 'z-width' throughtout in class
SkyModel
(*) Change docstring accordingly

from 31049a0 of general:
=======================

In catalog.py,

(*) Add type checking for flux-scale in input parameter in __init__()
member function of class SkyModel
(*) Enfore array broadcasting of flux_scale in member function
generate_spectrum() of class SkyModel
(*) Update docstring of class SkyModel

In geometry.py,

(*) Rename internal variables in altaz2dircos()

from 0ed80ca of general:
=======================

In catalog.py,

(*) In subset() member function of class SkyModel, input parameter 
indices is now not a keyword input but an essential input. Change 
handling of this input parameter by flattening it first
(*) In subset() member function src_shape is used only if it is set in
the first place
(*) Fix bug in subset() member function of class SkyModel where
earlier the all spectral functional names were returned instead only of
a subset

from 3ff2c66 of general:
=======================

In catalog.py,

(*) Comment out defunct classes Catalog and SkyModel
(*) Rename class SkyModel_new to SkyModel

from 306c2f2 of general:
=======================

In catalog.py,

(*) Create a new class SkyModel_new that can take sky model input whose 
spectral dimension can be specified as a functional form or as an input cube. It
has the ability to create a spectrum from these spectral parameters. This is 
intended to supercede and replace classes catalog and SkyModel.
(*) Create __init__(), subset(), match() and generate_spectrum() member 
functions for class SkyModel_new
(*) Import my_operations and lookup_operations modules 

from v1.08.1 of general:
=======================

In my_DSP_modules.py,

(*) In discretize(), changed input parameter named range to inprange in order
not to conflict with python's in-built command range(). Changed docstring
accordingly.
(*) In XC(), added input keyword parameter pow2 to return a sequence of length
which is the next power of 2. Also modified code and docstring accordingly. Also
when pow2 is False, length of the output sequence is equal to the sum of lengths 
of the two input sequences.
(*) In XC(), fixed a bug where inp2 was being forcibly reassigned to inp1.
(*) In XC(), zeros are padded in front instead of at the end. Also replaced 
NP.roll() with NP.fft.ifftshift() to do the shifting

In constants.py,

(*) Added rest frequency of 21 cm line of neutral hydrogen

In geometry.py,

(*) Changed the rotation matrix in xyz2enu() which was wrong earlier.
(*) Made dosctring of xyz2enu() and enu2xyz() more descriptive
(*) forced azimuth to lie in the range 0-360 in dircos2altaz()

In lookup_operations.py,

(*) Allow comments rows to be accounted for while reading the ascii file in 
read_lookup()
(*) Added a new function find_1NN_pp() that is identical in functionality to 
find_1NN() but should be only used only in parallel programming applications

---------------------------------------------------------------------------------
from v1.08 of general:
=====================

In lookup_operations.py,

(*) Changed name of parameter maxNN in lookup() to maxmatch to indicate that
it refers to number of unique matches to input required and remove the ambiguity
that it refers to number of nearest neighbours for each input location. The 
number of nearest neighbours sought per input location is fixed at 1 in the call
to KDTree query. Changed docstring accordingly.
(*) Docstring of lookup() did not match to the output produced. Fixed it.
(*) Created find_NN() that searches for the nearest neighbours.
(*) Created a new nearest neighbour lookup operation in lookup_1NN() which 
determines the first neighbour in the lookup (reference positions) table and
assigns the value of the nearest neighbour. It is intended to supercede the 
performance of lookup() as it is designed to handle locations in
multi-dimensional parameter (coordinate) space. Uses the find_1NN() routine to
find the nearest neighbours and then subsequently assigns nearest neighbour value

In my_DSP_modules.py,
   
(*) Created a function discretize() that discretizes an input sequence either by
truncation or rounding

---------------------------------------------------------------------------------
from v1.07 of general:
=====================

In my_DSP_modules.py,

(*) Added capability in functions shaping() and windowing() to accept values
'bhw' or 'BHW' in input shape and compute Blackman-Harris window. Changed 
docstrings accordingly.

---------------------------------------------------------------------------------
from v1.06 of general:
=====================

In my_DSP_modules.py,

(*) Added a new function fft_filter which can filter multi-dimensional input data
using the frequency domain representation of the input using frequency weights 
with passband options being 'low' or 'high'

In my_operations.py,

(*) added a customizable function to estimate root mean square value of an input
with multiple dimensions which can apply frequency domain filtering and/or 
mask before estimating standard deviation.
(*) in function reverse(), changed default of ind_range from [-1, 1] to None
because there seemed to be a bug where ind_range from previous call seemed to
copy over to the next call. Still needs to be udnerstood why this was happening.
Changing the default to None seems to eliminate this unexplained carryover.

In lookup_operations.py,

(*) Added a keyword maxNN to populate only the maxNN nearest neighbours with 
nearest neighbour values

---------------------------------------------------------------------------------
from v1.05 of general:
=====================

In geometry.py,

(*) Added further checks in hadec2altaz() to take into account machine precision
effects

Moved module lookup_operations.py from MOFF to general repository.

In lookup_operations.py,

(*) in function lookup(), distNN was not initialized when remove_oob is False.
Now it is initialized.

---------------------------------------------------------------------------------
from v1.04 of general:
=====================

In geometry.py,

(*) sphdist() now returns a flattened array as output
(*) Modified docstring in spherematch.py to indicate that the matches for the 
first catalog are searched for in the second catalog
(*) Modified docstring in spherematch.py to indicate the order of preference in
implementing keyword inputs nnearest and maxmatches
(*) In altaz2hadec(), added an important change that takes care of the sign 
conventions and distinguishes between azimuths that are on opposite sides
(*) In hadec2altaz(), modified to handle any NaN values arising out of machine
precision effects by adding a tolerance factor

In catalog.py,

(*) member function subset() of class Catalog now uses numpy.take() to select 
subset from indices instead of using fancy indexing. This will be faster when
size of indices is large.
(*) member function subset() of class Catalog modified to initialize a subset
catalog differently to reflect changes in Catalog attribute structure made in 
v1.04. 
(*) Modified the docstring of class Catalog to reflect the changes made in its
attribute structure in v1.04 which was forgotten to be made back then.

In my_DSP_modules.py,

(*) Added inverse FFT functionality to FT1D() through use of a boolean 'inverse'
keyword and changed docstring accordingly

---------------------------------------------------------------------------------
from v1.03 of general:
=====================

In catalog.py,

(*) Added a new attribute named 'name' to class Catalog that denotes the catalog 
to which the object belongs. The __init__() function inputs were modified
accordingly.
(*) Modified the attribute frequency of class Catalog to be a vector, one for
each object, thus giving the freedom to have a heterogeneous catalog with source
flux densities at different frequencies. Contents of the __init__() function were
modified accordingly
(*) Added error checking in __init__() member function of class Catalog
(*) Modified error checkign in __init__() member function of class Catalog to
retain src_shape as an optional input parameter

In my_operations.py,

(*) A new function named binned_statistic() has been added which is a wrapper for
the binned_statistic() function in scipy.stats but also can return the reverse
indices from the binning operation identical to the reverse indices oepration in
IDL's histogram.

In my_DSP_modules.py,

(*) New polyphase filter bank related functions, namely, PFB_FIR_coeff(), 
apply_PFB_filter(), PFB_shape(), sinewave(), and pfbshape() have been added.
These are untested and highly experimental. Documentation has to be provided.

---------------------------------------------------------------------------------
from v1.02 of general:
=====================

In geometry.py,

(*) Raising of few exceptions have been fixed.

In my_DSP_modules.py,

(*) In function windowing(), replaced the estimation of area using trapz() with
sum() even if the latter is less accurate in order to be more consistent with FFT
usage downstream.
(*) Added a function PFB_empirical() which empirically generates a polyphase
filter bank. 

In catalog.py, 

(*) Added a new attribute src_shape which is initialized by the newly included 
input parameter in the __init__() member function of class Catalog. The src_shape 
will consist of three elements, namely, major axis FWHM, minor axis FWHM, and 
position angle (degrees), for each source. The docstring has been modified
accordingly. 
(*) Added a new input parameter src_shape_units to member function __init__()
that specifies the units of the major and minor axes, and position angle. The
docstring has been modified accordingly.

---------------------------------------------------------------------------------
from v1.01 of general:
=====================

(*) Added a new module named foregrounds.py.
(*) Added a function power_law_spectral_index() which computes a single power law
spectral index when flux densities and corresponding frequencies are specified.

In my_DSP_modules.py,

(*) function shaping was modified to handle when the window shape is specified in
both lower and upper case letters
(*) Created a window shaping function windowing() which creates a window shape 
with optional padding, and centering capabilities. Differs from shaping() in that 
whole number of samples are specified instead of a fraction for padding.

In my_operations.py,

(*) In function reverse(), replaced the usage of sys.exit() with raise of
exceptions.

In catalog.py,

(*) In __init__() of class Catalog, force attributes flux_density and
spectral_index to a numpy vector of non-zero dimensions even if the input 
provides only a single object to be cataloged.

In geometry.py, 

(*) Modified altaz2dircos() so that it handles input altitudes which are negative
(*) Modified altaz2dircos() to check that altitudes lie in the range -90 to +90
degrees, earlier it was checking only the range 0 to 90 degrees.
(*) Rectified the return value in dircos2altaz() from being a 3-column array to a
2-column array. Changed documentation accordingly
(*) In dircos2altaz(), changed usage of numpy absolute() to numpy abs()

---------------------------------------------------------------------------------
from v1.0 of general:
====================

In my_DSP_modules.py,

(*) Moved functions XC() and spectax() from MOFF module to the DSP module.
Changed the module prefix in the concerned calling sequences accordingly.
(*) Added keyword boolean input 'shift' to perform a shift to the correlated
sequence to be compatible for equivalence with FFT based methods. Without shift,
the usual correlated sequence is returned.
(*) Added a function smooth() to smooth a sequence using a moving mean or median 
window
(*) Added a function filter() to create a low/high pass filtered data from the 
input using user supplied filter window specifications

In catalog.py,

(*) Added docstring to all classes and associated member functions
(*) Now input named catalog to the __init__() member function of class SkyModel
is verified to be an instance of class Catalog

In geometry.py,

(*) function altaz2dircos() was found to fail when a 2-element list was supplied
after converting from list to numpy array. Now it is forced to convert to a 
two-dimensional array even if only one list is provided.
(*) Moved the routine baseline_generator from geometry.py to interferometry.py

---------------------------------------------------------------------------------

from v1.2 of python-trials:
==========================

In geometry.py,

(*) Added docstring to class Point and its member functions
(*) Instance of Point class can now be initiated with a numpy array of
coordinates
(*) An instance can now be initialized using another instance of Point class
(*) Added operator overloading __abs__() to compute the magnitude of the vector
(*) Added overloaded comparison operators for <, <=, >, >=, and == to compare
the magnitudes of two vectors

In my_DSP_modules.py,

(*) Added a new function shaping() to return rectangular or Blackman-Nuttall 
windows. Read docstring for more details.
(*) Added new function downsampler() to downsample a given data set either
in intervals of integral multiples or non-integral intervals through 
interpolation.
(*) Added new function upsampler() to upsample a given data set through 
interpolation.

In my_gridding_modules.py,

(*) interpolate module in scipy is separately imported instead of a 
direct call using scipy.interpolate
(*) Modified conv_grid2d() to handle xc, yc, xkern, ykern, xgrid, ygrid,
and kernel not only as list inputs but also as numpy arrays
(*) Modified conv_grid1d() to handle xc, xkern, xgrid, ygrid, and kernel
not only as list inputs but also as numpy arrays
(*) Modified conv_grid1d() to perform complex interpolation depending on
input data type
(*) Modified conv_grid2d() to perform complex interpolation depending on
input data type
